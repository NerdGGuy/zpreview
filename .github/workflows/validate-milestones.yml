name: Validate Grant Milestones

on:
  push:
    paths:
      - '_grants/*.md'
  workflow_dispatch:

jobs:
  validate-milestones:
    runs-on: ubuntu-latest
    env:
      GRANT_PROJECT: ${{ vars.GRANT_PROJECT_NUMBER }}
    permissions:
      contents: read
      issues: write
      projects: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install @octokit/rest
          npm install gray-matter
          npm install yaml

      - name: Validate Milestones
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const matter = require('gray-matter');
            const path = require('path');
            
            // Get changed files
            const changedFiles = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha
            }).then(response => 
              response.data.files.filter(f => f.filename.startsWith('_grants/'))
            );

            for (const file of changedFiles) {
              // Read and parse the grant file
              const content = fs.readFileSync(file.filename, 'utf8');
              const { data, content: body } = matter(content);
              
              // Extract issue number from frontmatter
              const issueNumber = data.issue_number;
              
              // Parse milestones from markdown content
              const milestoneRegex = /(\d+)\.\s+Milestone\s+\d+\s*\n-\s*Amount\s+\(USD\):\s*(\d+)\s*\n-\s*Expected\s+Completion\s+Date:\s*(\d{4}-\d{2}-\d{2})\s*\n-\s*Deliverables:\s*(.+)$/gm;
              
              const milestones = [];
              let match;
              while ((match = milestoneRegex.exec(body)) !== null) {
                milestones.push({
                  number: parseInt(match[1]),
                  amount: parseInt(match[2]),
                  completionDate: match[3],
                  deliverables: match[4].trim()
                });
              }

              // Get project data
              const projects = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const project = projects.data.find(p => p.name === 'Grant Milestones');
              
              if (!project) {
                throw new Error('Grant Milestones project not found');
              }

              // For each milestone, verify/create project items
              for (const milestone of milestones) {
                const query = `project:${context.repo.owner}/${context.repo.repo}/${project.number} "Milestone ${milestone.number}"`;
                
                const items = await github.rest.search.issuesAndPullRequests({
                  q: query
                });

                if (items.data.total_count === 0) {
                  // Create new project item
                  await github.rest.projects.createCard({
                    column_id: project.columns[0].id,
                    note: JSON.stringify({
                      grantFile: file.filename,
                      milestoneNumber: milestone.number,
                      amount: milestone.amount,
                      completionDate: milestone.completionDate,
                      deliverables: milestone.deliverables,
                      status: 'New'
                    })
                  });
                } else {
                  // Verify existing item
                  const item = items.data.items[0];
                  const itemData = JSON.parse(item.body);
                  
                  if (
                    itemData.amount !== milestone.amount ||
                    itemData.completionDate !== milestone.completionDate ||
                    itemData.deliverables !== milestone.deliverables
                  ) {
                    // Update status to flag mismatch
                    await github.rest.projects.updateCard({
                      card_id: item.id,
                      note: JSON.stringify({
                        ...itemData,
                        status: 'Out of Sync'
                      })
                    });
                    
                    // Comment on the issue
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issueNumber,
                      body: `⚠️ Milestone ${milestone.number} in project is out of sync with grant file. Please review and update.`
                    });
                  }
                }
              }
            }
