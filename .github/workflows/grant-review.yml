# Grant Review Process Workflow
# Handles automated processing of grant applications when they are ready for review
name: Grant Review Process

# Add concurrency control to prevent multiple workflows running on same issue
concurrency:
  group: grant-${{ github.event.issue.number }}
  cancel-in-progress: true

on:
  issues:
    types: [labeled, edited]
  # Allow manual triggers for testing/recovery
  workflow_dispatch:
    inputs:
      issue-number:
        description: 'Issue number to process'
        required: true
        type: number

jobs:
  process-grant:
    name: Process Grant Application
    # Split conditions for better readability
    if: |
      (
        github.event.action == 'labeled' && 
        github.event.label.name == 'Ready for ZCG Review'
      ) || (
        github.event.action == 'edited' && 
        contains(github.event.issue.labels.*.name, 'Ready for ZCG Review')
      ) || 
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    # Split permissions by necessity
    permissions:
      contents: write    # For repo changes
      pull-requests: write  # For PR management
      issues: write     # For issue comments

    steps:
      # Optimize checkout for single branch
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Initial validation step
      - name: Validate Issue Format
        id: validate
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ISSUE_NUMBER="${{ github.event.inputs.issue-number }}"
          else
            ISSUE_NUMBER="${{ github.event.issue.number }}"
          fi
          echo "Processing issue #$ISSUE_NUMBER"
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
        shell: bash

      - name: Save Content
        id: save-content
        uses: ./.github/actions/save-content
        with:
          issue-body: ${{ github.event.issue.body }}
          issue-title: ${{ github.event.issue.title }}
          issue-number: ${{ steps.validate.outputs.issue_number }}
          author: ${{ github.event.issue.user.login }}
        continue-on-error: false  # Fail fast if content can't be saved

      # Add error handling
      - name: Check Save Content Status
        if: steps.save-content.outcome != 'success'
        run: |
          gh issue comment ${{ steps.validate.outputs.issue_number }} --body "⚠️ Failed to save grant content. Please contact administrators."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # PR Management with error handling
      - name: Manage PR
        id: pr-management
        uses: ./.github/actions/pr-management
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          branch-name: "grant-${{ steps.validate.outputs.issue_number }}"
          issue-number: ${{ steps.validate.outputs.issue_number }}
          issue-title: ${{ github.event.issue.title }}
        continue-on-error: false

      - name: Check PR Management Status
        if: steps.pr-management.outcome != 'success'
        run: |
          gh issue comment ${{ steps.validate.outputs.issue_number }} --body "⚠️ Failed to manage pull request. Please contact administrators."
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Protection and monitoring steps
      - name: Apply Protection Labels and Notice
        id: protection
        uses: ./.github/actions/protection-labels-notice
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.validate.outputs.issue_number }}
          repo-owner: ${{ github.repository_owner }}
          repo-name: ${{ github.event.repository.name }}
          pr-number: ${{ steps.pr-management.outputs.pr_number }}
          notice-message: ${{ fromYaml(readFile('.github/env.yml')).env.GRANT_NOTICE_MESSAGE }}
        continue-on-error: false

      - name: Monitor Changes
        id: monitor
        if: github.event.action == 'edited'
        uses: ./.github/actions/monitor-changes
        with:
          issue-number: ${{ steps.validate.outputs.issue_number }}
          repository-owner: ${{ github.repository_owner }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # Normal merge for new grants
      - name: Merge if new grant
        if: github.event.action == 'labeled'
        id: merge
        run: |
          echo "Processing merge for grant PR..."
          PR_NUMBER=$(gh pr list --head "grant-${{ steps.validate.outputs.issue_number }}" --json number --jq '.[0].number')
          if [ -n "$PR_NUMBER" ]; then
            echo "Found PR #$PR_NUMBER - attempting merge"
            gh pr merge $PR_NUMBER --merge
            echo "pr_merged=true" >> $GITHUB_OUTPUT
          else
            echo "No PR found to merge"
            echo "pr_merged=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Final status update - only on errors
      - name: Update Status
        if: failure()
        run: |
          gh issue comment ${{ steps.validate.outputs.issue_number }} --body "❌ Grant processing encountered errors"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
