name: Grant Application Workflow

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  process-grant-application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get/Set issue status
        id: get-status
        uses: actions/github-script@v7
        with:
          script: |
            const issueId = ${{ github.event.issue.node_id }};
            const projectId = ${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}; // Replace with your project ID
            const fieldId = ${{ vars.PROJECT_GRANT_APPLICATION_FIELD_ID }};     // Replace with your field ID
            
            // Query to get current status
            const query = `
              query GetIssueStatus($issueId: ID!, $fieldId: ID!) {
                node(id: $issueId) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldValue {
                            field {
                              ... on ProjectV2Field {
                                id
                                name
                              }
                            }
                            value
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            try {
              const result = await github.graphql(query, { issueId });
              
              // Check if issue is in project
              const projectItems = result.node.projectItems.nodes;
              const filteredProjectItems = projectItems.filter(item =>  
                item.fieldValueByName.field.id === fieldId
              );

              if (filteredProjectItems.length === 0) {
                core.info(`Debug: projectItems = ${JSON.stringify(projectItems)}`);
                core.info(`Debug: fieldId = ${fieldId}`);
                // Add issue to project if not present
                await github.graphql(`
                  mutation AddIssueToProject($projectId: ID!, $issueId: ID!) {
                    addProjectV2ItemById(input: {
                      projectId: $projectId
                      contentId: $issueId
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `, {
                  projectId,
                  issueId
                });
                
                core.setOutput('status', 'new');
                return;
              }

              // Get status value
              const statusField = filteredProjectItems[0].fieldValueByName;
              const status = statusField ? statusField.value : 'not_set';
              core.setOutput('status', status);
              
            } catch (error) {
              core.setFailed(`GraphQL query failed: ${error.message}`);
            }

      - name: Get all current labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            core.setOutput('result', JSON.stringify(labels.map(label => label.name)));

      - name: Process New Status
        if: steps.get-status.outputs.result == 'New'
        uses: ./.github/actions/grant-application/new
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ vars }}
          
      - name: Process Under Review Status
        if: steps.get-status.outputs.result == 'Under Review' 
        uses: ./.github/actions/grant-application/under-review
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ vars }}
