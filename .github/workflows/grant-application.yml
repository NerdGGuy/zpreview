name: Grant Application Workflow

on:
  issues:
    types: [labeled, unlabeled]

permissions:
  issues: write

jobs:
  process-grant-application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.ADMIN_APP_ID }}
          private-key: ${{ secrets.ADMIN_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Get/Set issue status
        id: get-status
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const issueId = "${{ github.event.issue.node_id }}";
            const projectId = "${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}"; // Replace with your project ID
            const statusId = "${{ vars.PROJECT_GRANT_APPLICATION_STATUS_ID }}";     // Replace with your status ID
            
            // Query to get current status
            const query = `
              query GetIssueStatus($issueId: ID!) {
                node(id: $issueId) {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        fieldValueByName(name: "Status") {
                          ... on ProjectV2ItemFieldSingleSelectValue {
                            field {
                              ... on ProjectV2Field {
                                id
                                name
                              }
                            }
                            name
                          }
                        }
                      }
                    }
                  }
                }s
              }
            `;
            const result = await github.graphql(query, { issueId });
            const projectItems = result.node.projectItems.nodes;
            const filteredProjectItems = projectItems.filter(item =>  
              item.fieldValueByName.field.id === statusId
            );

            // Set output based on whether the issue is already in the project and output the status value
            const isInProject = filteredProjectItems.length > 0;
            const statusValue = isInProject ? filteredProjectItems[0].fieldValueByName.name : 'New';
            core.setOutput('isInProject', isInProject);
            core.setOutput('statusValue', statusValue);

      - name: Add issue to GitHub Project
        id: add-to-project
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
        if: steps.add-to-project.outputs.isInProject == 'false'
        uses: octokit/graphql-action@v2.x
        with:
          query: |
            mutation AddIssueToProject($project_id: ID!, $content_id: ID!) {
              addProjectV2ItemById(input: { projectId: $project_id, contentId: $content_id }) {
                item {
                  id
                }
              }
            }
          variables: |
            project_id: ${{ vars.PROJECT_GRANT_APPLICATION_PROJECT_ID }}
            content_id: ${{ github.event.issue.node_id }}

      - name: Get all current labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              headers: {
                authorization: `token ${{ steps.generate-token.outputs.token }}`
              }
            });
            core.setOutput('result', JSON.stringify(labels.map(label => label.name)));

      - name: Process New Status
        if: steps.get-status.outputs.result == 'New'
        uses: ./.github/actions/grant-application/new
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ vars }}
          nerdgguy-app-id: ${{ secrets.NERDGGUY_APP_ID }}
          nerdgguy-client-id: ${{ secrets.NERDGGUY_CLIENT_ID }}
          nerdgguy-installation-id: ${{ secrets.NERDGGUY_INSTALLATION_ID }}
          
      - name: Process Under Review Status
        if: steps.get-status.outputs.result == 'Under Review' 
        uses: ./.github/actions/grant-application/under-review
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ vars }}
