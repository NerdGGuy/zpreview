name: Grant Application Workflow

on:
  issues:
    types: [labeled, unlabeled]

jobs:
  process-grant-application:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get/Set issue status
        id: get-status
        uses: actions/github-script@v7
        with:
          script: |
            try {
              core.info('Starting to get/set issue status');
              const vars = context.vars;
              core.info('Parsed vars: ' + JSON.stringify(vars));
              if (!vars.PROJECT_GRANT_APPLICATION_PROJECT_ID) {
                throw new Error('Required variable PROJECT_GRANT_APPLICATION_PROJECT_ID not found');
              }

              core.info('Executing GraphQL query to get project items');
              core.info('Issue ID: ' + issueId);

              const query = `query($issueId: ID!) {
                node(id: $issueId) {
                  ... on Issue {
                    projectItems(first: 1) {
                      nodes {
                        id
                        fieldValues(first: 1) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              name
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }`;
              
              const issueId = context.github.event.issue.node_id;
              const result = await github.graphql(query, { issueId });
              core.info('GraphQL query result: ' + JSON.stringify(result));
              if (!result.node.projectItems.nodes.length) {
                // Add to project if not present
                core.info('Issue not in project, adding to project');
                const addToProject = `mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemById(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }`;
                
                const addResult = await github.graphql(addToProject, {
                  projectId: vars.PROJECT_GRANT_APPLICATION_PROJECT_ID,
                  contentId: issueId
                });

                core.info('Add to project result: ' + JSON.stringify(addResult));
                if (!addResult.addProjectV2ItemById?.item?.id) {
                  throw new Error('Failed to add issue to project');
                }
                
                // Set initial status to New
                core.setOutput('result', 'New');
              } else {
                const status = result.node.projectItems.nodes[0]?.fieldValues.nodes[0]?.name || 'New';
                core.info('Current status: ' + status);
                core.setOutput('result', status);
              }
            } catch (error) {
              core.setFailed(`Failed to get/set issue status: ${error.message}`);
              throw error;
            }

      - name: Get all current labels
        id: get-labels
        uses: actions/github-script@v7
        with:
          script: |
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            core.setOutput('result', JSON.stringify(labels.map(label => label.name)));

      - name: Process New Status
        if: steps.get-status.outputs.result == 'New'
        uses: ./.github/actions/grant-application/new
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ toJSON(vars) }}
          
      - name: Process Under Review Status
        if: steps.get-status.outputs.result == 'Under Review' 
        uses: ./.github/actions/grant-application/under-review
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          issue-title: ${{ github.event.issue.title }}
          label-name: ${{ github.event.label.name }}
          label-action: ${{ github.event.action }}
          current-labels: ${{ steps.get-labels.outputs.result }}
          vars: ${{ toJSON(vars) }}
